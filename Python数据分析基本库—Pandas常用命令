在参考相关资料的基础上，做了一些补充，整理出Pandas常用命令如下：

Pandas常用命令

说明[1]

•在这个速查手册中，我们使用如下缩写：
df：任意的Pandas DataFrame对象 s ：任意的Pandas Series对象
•同时我们需要做如下的引入：
import pandas as pd
import numpy as np
导入数据

•pd.read_csv(filename)：从CSV文件导入数据
•pd.read_table(filename)：从限定分隔符的文本文件导入数据
•pd.read_excel(filename)：从Excel文件导入数据
•pd.read_sql(query, connection_object)：从SQL表/库导入数据
•pd.read_json(json_string)：从JSON格式的字符串导入数据
•pd.read_html(url)：解析URL、字符串或者HTML文件，抽取其中的tables表格
•pd.read_clipboard()：从你的粘贴板获取内容，并传给read_table()
•pd.DataFrame(dict)：从字典对象导入数据，Key是列名，Value是数据
导出数据

•df.to_csv(filename)：导出数据到CSV文件
•df.to_excel(filename)：导出数据到Excel文件
•df.to_sql(table_name, connection_object)：导出数据到SQL表
•df.to_json(filename)：以Json格式导出数据到文本文件
创建测试对象

•pd.DataFrame(np.random.rand(20,5))：创建20行5列的随机数组成的DataFrame对象
•pd.Series(my_list)：从可迭代对象my_list创建一个Series对象
•df.index = pd.date_range('1900/1/30', periods=df.shape[0])：增加一个日期索引
查看、检查数据

•df.head(n)：查看DataFrame对象的前n行
•df.tail(n)：查看DataFrame对象的最后n行
•df.shape()：查看行数和列数 # Windows加括号报错
•df.info()：查看索引、数据类型和内存信息
•df.columns 查看列
•df.index 查看索引
•df.describe()查看数值型列的汇总统计会对数字进行统计显示总数最大最小差值
•s.value_counts(dropna=False)：查看Series对象的唯一值和计数
•df.apply(pd.Series.value_counts)：查看DataFrame对象中每一列的唯一值和计数
数据选取

•df[col]：根据列名，并以Series的形式返回列
•df[[col1, col2]]：以DataFrame形式返回多列
•s.iloc[0]：按位置选取数据 支持索引、切片
•s.loc['index_one']：按索引选取数据 没看懂这是什么鬼
•df.iloc[0,:]：返回第一行 冒号表示从头到尾，可以指定切片长度
•df.iloc[0,0]：返回第一列的第一个元素
•df.iloc[:,0]: 返回第一列数据
数据清理

•df.columns = ['a','b','c']：重命名列名
•pd.isnull().any()：检查DataFrame对象中的空值，并返回一个Boolean数组
•pd.notnull().any()：检查DataFrame对象中的非空值，并返回一个Boolean数组
•pd[pd.notnull() == True] 过滤所有的空值
•pd[pd.列名.notnull() == True] 过滤本列中是空值的数据
•df.dropna()：删除所有包含空值的行
•df.dropna(axis=1)：删除所有包含空值的列
•df.dropna(axis=1,thresh=n)：删除所有小于n个非空值的行
•df.fillna(x)：用x替换DataFrame对象中所有的空值
•s.astype(float)：将Series中的数据类型更改为float类型
•s.replace(1,'one')：用‘one’代替所有等于1的值 测试中将浮点数替换int 整列变成int类型
•s.replace([1,3],['one','three'])：用'one'代替1，用'three'代替3
•df.rename(columns=lambda x: x + 1)：批量更改列名
•df.rename(columns={'old_name': 'new_ name'})：选择性更改列名
•df.set_index('column_one')：更改索引列
•df.rename(index=lambda x: x + 1)：批量重命名索引
数据处理：Filter、Sort和GroupBy

•df[df[col] > 0.5]：选择col列的值大于0.5的行
•df.sort_values(col1)：按照列col1排序数据，默认升序排列
•df.sort_values(col2, ascending=False)：按照列col1降序排列数据
•df.sort_values([col1,col2], ascending=[True,False])：先按列col1升序排列，后按col2降序排列数据
•df.groupby(col)：返回一个按列col进行分组的Groupby对象 . 真的返回个队形地址
•df.groupby([col1,col2])：返回一个按多列进行分组的Groupby对象 .
•df.groupby(col1)[col2]：返回按列col1进行分组后，列col2的均值 . 还是返回地址
•df.pivot_table(index=col1, values=[col2,col3], aggfunc=max)：创建一个按列col1进行分组，并计算col2和col3的最大值的数据透视表
•customer_data.pivot_table(index='refer', values='age', aggfunc=[max, min]) . 显示每个渠道的最大最小值
•df.groupby(col1).agg(np.mean)：返回按列col1分组的所有列的均值，经常用于按渠道显示每个渠道的平均值，每个渠道的年龄平均值（最大最小行整条数据）
•data.apply(np.mean)：对DataFrame中的每一列应用函数np.mean
•data.apply(np.max,axis=1)：对DataFrame中的每一行应用函数np.max
数据处理：添加新列

•根据当前处理结果将结果添加到新的列/增加一列
•frame['test'] = frame.apply(lamubda x: function(x.city, x.year), axis = 1)
•function是编写的函数
数据合并

•df1.append(df2)：将df2中的行添加到df1的尾部
•df.concat([df1, df2],axis=1)：将df2中的列添加到df1的尾部
•df1.join(df2,on=col1,how='inner')：对df1的列和df2的列执行SQL形式的join
数据统计

•df.describe()：查看数据值列的汇总统计
•df.mean()：返回所有列的均值
•df.corr()：返回列与列之间的相关系数
•df.count()：返回每一列中的非空值的个数
•df.max()：返回每一列的最大值
•df.min()：返回每一列的最小值
•df.median()：返回每一列的中位数
•df.std()：返回每一列的标准差 离散度
•数值越大表示数据越散
绘图

pandas的两类基本数据结构series和dataframe都提供了一个统一的接口plot()

•df.plot.bar()：bar条形图，bar（）函数有一个重要的参数，stacked，默认为false，表示不堆积，设置为true则表示为堆积。
•df.plot.hist(alpha=0.5)：histogram
•df.plot.box()：box绘图
•df.plot.area()：area绘图
•df.plot.hexbin(x='a', y='b', gridsize=25)：Hexagonal Bin Plot
所有绘图方法[2]

•‘bar’ or ‘barh’ for bar plots #条状图
•‘hist’ for histogram #频率柱状图（计算某些值出现的频率）
•‘box’ for boxplot #箱线图（）
•‘kde’ or ‘density’ for density plots #密度图（需要scipy这个包）
•‘area’ for area plots #区域图（不同域的面积占比）
•‘scatter’ for scatter plots #散点图 >>> plt.scatter(df['part A'], df['part B'])
•‘hexbin’ for hexagonal bin plots # >>> plt.hexbin(df['part A'], df['part B'], df['part C'])
•‘pie’ for pie plots #饼图，比较适合与Series对象，看不同的占比
时间[3]

•df['date'] = pd.to_datetime(df['date'])：将数据类型转换为日期类型
•df = df.set_index('date')：将date设置为index
•df['2010'].head()：获取某年的数据
•df['2013-11'].head()：获取某月的数据
•df["订单生成时间"] = pd.to_datetime(df["订单生成时间"])
•df["时间"] = df["订单生成时间"].dt.hour #提取时间
•df["日期"] = df["订单生成时间"].dt.date #提取日期
•DataFrame.truncate(before=None, after=None, axis=None, copy=True)：获取某个日期之前/后或时间区间的数据
References

[1] 说明: https://www.cnblogs.com/valorchang/p/11690888.html
[2] 所有绘图方法: https://blog.csdn.net/genome_denovo/java/article/details/78322628
[3] 时间: https://blog.csdn.net/weixin_42782150/article/details/90632688
