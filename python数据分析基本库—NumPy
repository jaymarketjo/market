（一）NumPy——数值计算
1. NumPy简介

NumPy(Numerical Python) 是 Python 语言的一个扩展程序库，支持大量的维度数组与矩阵运算，此外也针对数组运算提供大量的数学函数库。主要用于数组计算，包含：

ndarray，一个多维数组结构，高效且节省空间
无需循环对整组数据进行快速运算的数学函数
*读写磁盘数据的工具以及用于操作内存映射文件的工具
*线性代数、随机数生成和傅里叶变换功能
*用于集成C、C++等代码的工具
python中操作方式：

安装方法：pip install numpy
引用方式：import numpy as np
此外，还可以通过安装anaconda的形式直接安装，anaconda中包含numpy、pandas、matploltib等。推荐这种安装方式，省去很多安装库和环境配置的过程。

2. NumPy 应用

NumPy 通常与 SciPy（Scientific Python）和 Matplotlib（绘图库）一起使用， 这种组合广泛用于替代 MatLab，是一个强大的科学计算环境，有助于我们通过 Python 学习数据科学或者机器学习。

SciPy 是一个开源的 Python 算法库和数学工具包。

SciPy 包含的模块有最优化、线性代数、积分、插值、特殊函数、快速傅里叶变换、信号处理和图像处理、常微分方程求解和其他科学与工程中常用的计算。

Matplotlib 是 Python 编程语言及其数值数学扩展包 NumPy 的可视化操作界面。它为利用通用的图形用户界面工具包，如 Tkinter, wxPython, Qt 或 GTK+ 向应用程序嵌入式绘图提供了应用程序接口（API）。

3.NumPy Ndarray 对象

数组的是numpy中最重要的概念

一维数组

城市	2018年GDP（亿元）
武汉	10579.5
襄阳	2998.2
宜昌	2931.56

二维数组

城市	2018年GDP（亿元）	2017年GDP（亿元）
武汉	10579.5	          9397.17
襄阳	2998.2	          2754.78
宜昌	2931.56	          2725.32

创建一个 ndarray 只需调用 NumPy 的 array 函数即可：

numpy.array(object, dtype = None, copy = True, order = None, subok = False, ndmin = 0)

参数说明：

名称	描述
object	数组或嵌套的数列
dtype	数组元素的数据类型，可选
copy	对象是否需要复制，可选
order	创建数组的样式，C为行方向，F为列方向，A为任意方向（默认）
subok	默认返回一个与基类类型一致的数组
ndmin	指定生成数组的最小维度
NumPy的中创建数组的方式有若干种。最简单的，可以直接利用的Python中常规的列表和元组进行创建。

（1）numpy.array()构造 ndarray

import numpy as np
lst = [1,2,3,4,5,6] #列表
ar = np.array(lst)
ar

tup = (1,2,3,4,5,6) #元组
ar1 = np.array(tup)
ar1

（2）numpy构建特定数组形式

a = np.zeros((3,4))
b = np.zeros((2,2,2))
c = np.ones((3,3))
e = np.arange(15)
f = np.arange(15).reshape(3,5)
g = np.arange(0,15,3)

4. NumPy 数组属性

属性	说明
ndarray.ndim	秩，即轴的数量或维度的数量
ndarray.shape	数组的维度，对于矩阵，n 行 m 列
ndarray.size	数组元素的总个数，相当于 .shape 中 n*m 的值
ndarray.dtype	ndarray 对象的元素类型
ndarray.itemsize	ndarray 对象中每个元素的大小，以字节为单位
ndarray.flags	ndarray 对象的内存信息
ndarray.real	ndarray元素的实部
ndarray.imag	ndarray 元素的虚部
ndarray.data	包含实际数组元素的缓冲区，由于一般通过数组的索

实例

f = np.arange(15).reshape(3,5)
f

f.ndim

5. 数组元素的获取
NumPy支持一维数组的索引，切片。多维数组与一维数组相似，其在每个轴上都有一个对应的索引（索引），这些索引是在一个逗号分隔的列表中给出的。
(1) 数组的索引
一维数组

import numpy as np
a = np.arange(10)
a[3]
a[-3]
a[1:-3]
a[::-1]
a[1:-3:2]

多维数组

b = np.arange(18).reshape(3,6)
b[2,4]
b[:, 1]

（2）数组组合

x = np.array([1,2,3])
y = np.array([3,2,1])
np.concatenate[x,y]

(3)  数组拆分

c = np.arange(16).reshape(4,4)
m,n = np.vsplit(c,[2])
p,q = np.hsplit(c,[2])

5. 数组的运算
数组可以进行 + - * / 等运算

c = np.arange(16).reshape(4,4)
c+1
c*3
c/3

6. 数组的广播

d = np.array([1,2,3])
e = np.array([4,5,6])
d+e
d-e
d*e

二维数组类似，当维数不一样时，遵从以下规则：
规则1：
如果两个数组的维度数不相同，那么小维度数组的形状将会在最左边补1；
规则2：
如果两个数组的形状在任何一个维度上都不匹配，那么数组的形状会沿着维度为1的维度扩展以匹配另外一个数组的形状；
规则3：
如果两个数组的形状在任何一个维度上都不匹配，并且没有任何一个维度等于1，那么会引发异常。

a = np.arange(3).reshape((3, 1))
b = np.arange(3)
a+b

7. numpy函数
操作符	对应的通用函数	描述
+	np.add	Addition (e.g., 1 + 1 = 2)
-	np.subtract	Subtraction (e.g., 3 - 2 = 1)
-	np.negative	Unary negation (e.g., -2)
*	np.multiply	Multiplication (e.g., 2 * 3 = 6)
/	np.divide	Division (e.g., 3 / 2 = 1.5)
//	np.floor_divide	Floor division (e.g., 3 // 2 = 1)
**	np.power	Exponentiation (e.g., 2 ** 3 = 8)
%	np.mod	Modulus/remainder (e.g., 9 % 4 = 1)

实例

x = np.array([-2, -1, 0, 1, 2])
np.absolute(x)
np.abs(x)

t = np.linspace(0, np.pi, 3)
print("t      = ", t)
print("sin(t) = ", np.sin(t))
print("cos(t) = ", np.cos(t))
print("tan(t) = ", np.tan(t))

























